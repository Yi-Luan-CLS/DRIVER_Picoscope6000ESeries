################################################################
# File:        Picoscope.db
# Description: EPICS PV database for Picoscope PS6000A. Includes 
#              channel setup, trigger configuration, timebase, 
#              waveform control, and logging PVs.
#
# Copyright (c) 2025 Canadian Light Source Inc.
#
# This file is part of DRIVER_Picoscope6000ESeries.
#
# DRIVER_Picoscope6000ESeries is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DRIVER_Picoscope6000ESeries is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
################################################################

record(waveform, "$(OSC):log"){ 
    field(DTYP, "Picoscope")
    field(SCAN, "Passive")
    field(MPST, "1")
    field(NELM, "500")
    field(FTVL, "CHAR")
    field(INP, "@S:$(SERIAL_NUM) @L:get_log")
}

record(ai, "$(OSC):status_code") {
    field(DTYP, "Picoscope")
    field(SCAN, "Passive")
    field(VAL, "0")
    
    field(INP, "@S:$(SERIAL_NUM) @L:get_status_code")
}

################################################################
#### Oscilloscope  PVs 
################################################################

record(mbbo, "$(OSC):resolution"){
    field(DTYP, "Picoscope")
    field(DESC, "Sampling resolution of device.")

    field(ZRST, "8BIT")        field(ZRVL, "0")
    field(ONST, "10BIT")       field(ONVL, "10")
    field(TWST, "12BIT")       field(TWVL, "1")

    field(OUT, "@S:$(SERIAL_NUM) @L:set_resolution")
    field(FLNK, "$(OSC):resolution:fbk")
}

record(mbbi, "$(OSC):resolution:fbk") {
    field(DTYP, "Picoscope")

    field(ZRST, "8BIT")        field(ZRVL, "0")
    field(ONST, "10BIT")       field(ONVL, "10")
    field(TWST, "12BIT")       field(TWVL, "1")

    field(INP, "@S:$(SERIAL_NUM) @L:get_resolution")
}

record(bo, "$(OSC):ON") {
    field(DTYP, "Picoscope")
    field(DESC, "Turn picoscope on/off.")
    field(ZNAM, "OFF")        
    field(ONAM, "ON") 

    field(RVAL,  "1")
    field(OUT, "@S:$(SERIAL_NUM) @L:open_picoscope")
    field(FLNK,  "$(OSC):ON:fanout")
}

record(fanout, "$(OSC):ON:fanout") {
    field(SELM, "All")
    field(LNK1, "$(OSC):device_info")
    field(LNK2, "$(OSC):ON:fbk")
}

record(bi, "$(OSC):ON:fbk") {
    field(DTYP, "Picoscope")

    field(ZNAM, "OFF")
    field(ONAM, "ON")
    
    field(SCAN, "10 second")
    field(INP, "@S:$(SERIAL_NUM) @L:get_device_status")
}

record(stringin, "$(OSC):device_info") {
    field(DTYP, "Picoscope")
    field(DESC, "Model and serial number of device.")
    field(INP, "@S:$(SERIAL_NUM) @L:get_device_info")
    field(SCAN, "Passive")
}

################################################################
#### PVs used to configure data capture
################################################################
record(ao, "$(OSC):num_samples"){
    field(DESC, "Number of samples required.")
    field(DTYP, "Picoscope")
    field(VAL, "10000")
    field(DRVH, "1000000")
    field(DRVL, "1") 
    field(OUT, "@S:$(SERIAL_NUM) @L:set_num_samples")
    
    field(FLNK, "$(OSC):timebase:fbk:fanout")
}

record(ao, "$(OSC):trigger_pulse_width"){
    field(DESC, "Number of samples required.")
    field(DTYP, "Picoscope")
    field(VAL, "0.00000005")
    field(DRVL, "0") 
    field(OUT, "@S:$(SERIAL_NUM) @L:set_trigger_pulse_width")
    
    field(FLNK, "$(OSC):timebase:fbk:fanout")
}

record(ai, "$(OSC):num_samples:fbk") {
    field(DESC, "Number of samples returned.")
    field(DTYP, "Picoscope")
    field(INP, "@S:$(SERIAL_NUM) @L:get_num_samples")
}

record(ai, "$(OSC):trigger_pulse_width:fbk") {
    field(DESC, "Trigger signal pulse width returned.")
    field(DTYP, "Picoscope")
    field(INP, "@S:$(SERIAL_NUM) @L:get_trigger_pulse_width")
}

record(ao, "$(OSC):down_sample_ratio"){
    field(DESC, "Down sampling factor to apply to data.")
    field(DTYP, "Picoscope")
    field(VAL, "0")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_down_sampling_ratio")
}

record(ai, "$(OSC):down_sample_ratio:fbk"){
    field(DESC, "Actual down sampling factor applied.")
    field(DTYP, "Picoscope")
    field(INP, "@S:$(SERIAL_NUM) @L:get_down_sampling_ratio")
}

record(mbbo, "$(OSC):down_sample_ratio_mode") {
    field(DTYP, "Picoscope")
    field(DESC, "Method of data reduction/downsampling.")

    field(ZRST, "AGGREGATE")                field(ZRVL, "1")
    field(ONST, "DECIMATE")                 field(ONVL, "2")
    field(TWST, "AVERAGE")                  field(TWVL, "4")
    field(THST, "TRIG_DATA_FOR_TIME_CALC")  field(THVL, "0x10000000")
    field(FRST, "TRIGGER")                  field(FRVL, "0x40000000")
    field(FVST, "RAW")                      field(FVVL, "0x80000000")

    field(RVAL, "0x80000000")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_down_sampling_ratio_mode")
    field(FLNK, "$(OSC):down_sample_ratio_mode:fbk")
}

record(mbbi, "$(OSC):down_sample_ratio_mode:fbk") {
    field(DTYP, "Picoscope")
    field(DESC, "Data reduction/downsampling method set.")
    
    field(ZRST, "AGGREGATE")                field(ZRVL, "1")
    field(ONST, "DECIMATE")                 field(ONVL, "2")
    field(TWST, "AVERAGE")                  field(TWVL, "4")
    field(THST, "TRIG_DATA_FOR_TIME_CALC")  field(THVL, "0x10000000")
    field(FRST, "TRIGGER")                  field(FRVL, "0x40000000")
    field(FVST, "RAW")                      field(FVVL, "0x80000000")
    
    field(VAL, "5")
    field(INP, "@S:$(SERIAL_NUM) @L:get_down_sampling_ratio_mode")
}

record(ao, "$(OSC):trigger_position_ratio") {
    field(DESC, "The position of the trigger point.")
    field(DTYP, "Picoscope")
    field(VAL, "50")
    field(DRVH, "100")
    field(DRVL, "0")
    field(EGU, "%")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_trigger_position_ratio")
}

record(ai, "$(OSC):trigger_position_ratio:fbk"){ 
    field(DESC, "Actual position of the trigger point.")
    field(DTYP, "Picoscope")
    field(EGU, "%")
    field(INP, "@S:$(SERIAL_NUM) @L:get_trigger_position_ratio")
}

################################################################
#### Timebase related PVs 
################################################################
record(mbbo, "$(OSC):time_per_division:unit") {
    field(DESC, "Time unit per division.")
    field(DTYP, "Picoscope")
    field(ZRST, "ns/div")        field(ZRVL, "0")
    field(ONST, "us/div")        field(ONVL, "1")
    field(TWST, "ms/div")        field(TWVL, "2")
    field(THST, "s/div")         field(THVL, "3")
    
    field(RVAL, "1")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_time_per_division_unit")
    field(FLNK, "$(OSC):timebase:fbk:fanout")
}

record(mbbi, "$(OSC):time_per_division:unit:fbk") {
    field(DESC, "Time unit per division.")
    field(DTYP, "Picoscope")
    field(ZRST, "ns/div")        field(ZRVL, "0")
    field(ONST, "us/div")        field(ONVL, "1")
    field(TWST, "ms/div")        field(TWVL, "2")
    field(THST, "s/div")         field(THVL, "3")
    
    field(VAL, "1")
    field(INP, "@S:$(SERIAL_NUM) @L:get_time_per_division_unit")
} 

record(mbbo, "$(OSC):time_per_division") {
    field(DESC, "Time per division.")
    field(DTYP, "Picoscope")

    field(ZRST, "1")        field(ZRVL, "1")
    field(ONST, "2")        field(ONVL, "2")
    field(TWST, "5")        field(TWVL, "5")
    field(THST, "10")       field(THVL, "10")
    field(FRST, "20")       field(FRVL, "20")
    field(FVST, "50")       field(FVVL, "50")
    field(SXST, "100")      field(SXVL, "100")
    field(SVST, "200")      field(SVVL, "200")
    field(EIST, "500")      field(EIVL, "500")
    field(NIST, "1000")     field(NIVL, "1000")
    field(TEST, "2000")     field(TEVL, "2000")
    field(ELST, "5000")     field(ELVL, "5000")

    field(RVAL, "1")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_time_per_division")
    field(FLNK, "$(OSC):timebase:fbk:fanout")
}

record(mbbi, "$(OSC):time_per_division:fbk") {
    field(DESC, "Time per division.")
    field(DTYP, "Picoscope")

    field(ZRST, "1")        field(ZRVL, "1")
    field(ONST, "2")        field(ONVL, "2")
    field(TWST, "5")        field(TWVL, "5")
    field(THST, "10")       field(THVL, "10")
    field(FRST, "20")       field(FRVL, "20")
    field(FVST, "50")       field(FVVL, "50")
    field(SXST, "100")      field(SXVL, "100")
    field(SVST, "200")      field(SVVL, "200")
    field(EIST, "500")      field(EIVL, "500")
    field(NIST, "1000")     field(NIVL, "1000")
    field(TEST, "2000")     field(TEVL, "2000")
    field(ELST, "5000")     field(ELVL, "5000")

    field(VAL, "1")
    field(INP, "@S:$(SERIAL_NUM) @L:get_time_per_division")
} 

record(ao, "$(OSC):num_divisions"){ 
    field(DTYP, "Picoscope")
    field(DESC, "Number of divisions.")
    field(VAL, "10")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_num_divisions")
    
    field(FLNK, "$(OSC):timebase:fbk:fanout")
}

record(ai, "$(OSC):num_divisions:fbk"){
    field(DTYP, "Picoscope")
    field(DESC, "Number of divisions.")
    field(INP, "@S:$(SERIAL_NUM) @L:get_num_divisions")
}

record(ai, "$(OSC):sample_interval:fbk"){ 
    field(DTYP, "Picoscope")
    field(DESC, "Actual sample interval in seconds.")
    field(EGU, "seconds")
    field(INP, "@S:$(SERIAL_NUM) @L:get_sample_interval")
}

record(ai, "$(OSC):timebase:fbk"){
    field(DESC, "Actual timebase")
    field(DTYP, "Picoscope")
    field(INP, "@S:$(SERIAL_NUM) @L:get_timebase")
}

record(ai, "$(OSC):num_subwaveforms:fbk"){ 
    field(DTYP, "Picoscope")
    field(DESC, "#ofwaveforms to build requested waveform")
    field(INP, "@S:$(SERIAL_NUM) @L:get_num_subwaveforms")
}

record(ai, "$(OSC):sample_rate:fbk") {
    field(DESC, "Samples per second.")
    field(DTYP, "Picoscope")
    field(EGU, "S/s")
    field(INP, "@S:$(SERIAL_NUM) @L:get_sample_rate")
}

record(fanout, "$(OSC):timebase:fbk:fanout"){ 
    field(LNK1, "$(OSC):sample_interval:fbk")
    field(LNK2, "$(OSC):timebase:fbk")
    field(LNK3, "$(OSC):sample_rate:fbk")
    field(LNK4, "$(OSC):time_per_division:unit:fbk")
    field(LNK5, "$(OSC):time_per_division:fbk")
    field(LNK6, "$(OSC):num_divisions:fbk")
    field(LNK7, "$(OSC):num_samples:fbk")
    field(LNK8, "$(OSC):trigger_pulse_width:fbk")
    field(LNK9, "$(OSC):num_subwaveforms:fbk")
}

################################################################
#### PVs for acquiring waveform data 
################################################################
record(bo, "$(OSC):waveform:start") {
    field(DTYP, "Raw Soft Channel")
    field(VAL,  "0")
    field(ONAM, "START")
    field(HIGH, "1")
    field(FLNK, "$(OSC):waveform:start:fanout")    
}

record(fanout, "$(OSC):waveform:start:fanout") {
    field(LNK1, "$(OSC):trigger:channel:fbk")
    field(LNK2, "$(OSC):down_sample_ratio:fbk")
    field(LNK3, "$(OSC):down_sample_ratio_mode:fbk")
    field(LNK4, "$(OSC):trigger_position_ratio:fbk")
    field(LNK5, "$(OSC):trigger:direction:fbk")
    field(LNK6, "$(OSC):trigger:mode:fbk")
    field(LNK7, "$(OSC):trigger:upper:threshold:fbk")
    field(LNK8, "$(OSC):trigger:lower:threshold:fbk")
    field(LNK9, "$(OSC):waveform:start:calcout.PROC")
}

record(calcout, "$(OSC):waveform:start:calcout") {
    field(SCAN, "Passive")
    field(CALC, "A")
    field(INPA, "$(OSC):waveform:start")
    field(OOPT, "Transition To Non-zero")
    field(OUT, "$(OSC):waveform:start:call.PROC PP")
}

record(waveform, "$(OSC):waveform:start:call"){
    field(DTYP, "Picoscope")
    field(SCAN, "Passive")
    field(FTVL, "SHORT")
    field(INP, "@S:$(SERIAL_NUM) @L:start_retrieve_waveform")
}

record(ai, "$(OSC):waveform:start:fbk:get") {
    field(DTYP, "Picoscope")
    field(SCAN, "5 second")
    field(INP, "@S:$(SERIAL_NUM) @L:get_acquisition_status")
    field(FLNK, "$(OSC):waveform:start:fbk.PROC")
}

record(bi, "$(OSC):waveform:start:fbk"){
    field(DTYP, "Soft Channel")
    field(DESC, "Get data acquisition status.")
    field(ZNAM, "STOPPED")
    field(ONAM, "ACQUIRING")
    field(SCAN, "Passive")
    field(INP, "$(OSC):waveform:start:fbk:get")
}

record(bo, "$(OSC):waveform:stop") {
    field(DTYP, "Raw Soft Channel")
    field(VAL,  "0")
    field(ONAM, "STOP")
    field(HIGH, "1")
    field(FLNK, "$(OSC):waveform:stop:calcout")    
}

record(calcout, "$(OSC):waveform:stop:calcout") {
    field(SCAN, "Passive")
    field(CALC, "A")
    field(INPA, "$(OSC):waveform:stop")
    field(OOPT, "Transition To Non-zero")
    field(OUT, "$(OSC):waveform:stop:call.PROC PP")
}

record(waveform, "$(OSC):waveform:stop:call"){
    field(DTYP, "Picoscope")
    field(SCAN, "Passive")
    field(FTVL, "SHORT")
    field(INP, "@S:$(SERIAL_NUM) @L:stop_retrieve_waveform")
}

record(ao, "$(OSC):auto_trigger_us"){ 
    field(DTYP, "Picoscope")
    field(DESC, "us to wait for trigger before collecting")
    field(EGU, "us")
    field(VAL, "0")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_auto_trigger_us")
    field(FLNK, "$(OSC):auto_trigger_us:fbk")
}

record(ai, "$(OSC):auto_trigger_us:fbk"){ 
    field(DTYP, "Picoscope")
    field(DESC, "us to wait for trigger before collecting")
    field(EGU, "us")
    field(VAL, "0")
    field(INP, "@S:$(SERIAL_NUM) @L:get_auto_trigger_us")
}

record(mbbo, "$(OSC):trigger:type") {
    field(DTYP, "Picoscope")
    field(RVAL, "1")

    field(ZRST, "NO TRIGGER")     field(ZRVL, "0")
    field(ONST, "SIMPLE EDGE")    field(ONVL, "1")
    field(TWST, "WINDOW")         field(TWVL, "2")    
    field(THST, "ADVANCED EDGE")  field(THVL, "3")        


    field(OUT, "@S:$(SERIAL_NUM) @L:set_trigger_type")
    field(FLNK, "$(OSC):trigger:type:fbk")
}

record(mbbi, "$(OSC):trigger:type:fbk"){
    field(DTYP, "Picoscope")
    field(VAL, "1")

    field(ZRST, "NO TRIGGER")     field(ZRVL, "0")
    field(ONST, "SIMPLE EDGE")    field(ONVL, "1")
    field(TWST, "WINDOW")         field(TWVL, "2")   
    field(THST, "ADVANCED EDGE")  field(THVL, "3")        

    field(INP, "@S:$(SERIAL_NUM) @L:get_trigger_type")
}

record(mbbo, "$(OSC):trigger:channel") {
    field(DTYP, "Picoscope")
    field(DESC, "Set Trigger Source Channel.")

    field(ZRST, "CHANNEL_A")             field(ZRVL, "0")
    field(ONST, "CHANNEL_B")             field(ONVL, "1")
    field(TWST, "CHANNEL_C")             field(TWVL, "2")        
    field(THST, "CHANNEL_D")             field(THVL, "3")        
    field(FRST, "TRIGGER_AUX")           field(FRVL, "1001")    
    field(FVST, "NONE")                  field(FVVL, "10")
    
    field(RVAL, "1001")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_trigger_channel")
    field(FLNK, "$(OSC):trigger:channel:fbk")
}

record(mbbi, "$(OSC):trigger:channel:fbk") {
    field(DTYP, "Picoscope")
    field(DESC, "Get Trigger Source Channel.")
    
    field(ZRST, "CHANNEL_A")             field(ZRVL, "0")
    field(ONST, "CHANNEL_B")             field(ONVL, "1")
    field(TWST, "CHANNEL_C")             field(TWVL, "2")        
    field(THST, "CHANNEL_D")             field(THVL, "3")        
    field(FRST, "TRIGGER_AUX")           field(FRVL, "1001")    
    field(FVST, "NONE")                  field(FVVL, "10")
    
    field(VAL, "4")
    field(INP, "@S:$(SERIAL_NUM) @L:get_trigger_channel")
}

record(mbbo, "$(OSC):trigger:direction") {
    field(DTYP, "Picoscope")

    field(DESC, "Set Trigger Direction.")
    field(ZRST, "RISING")               field(ZRVL, "2")
    field(ONST, "FALLING")              field(ONVL, "3")

    field(RVAL, "2")
    field(FLNK, "$(OSC):trigger:direction:fbk")        
    field(OUT, "@S:$(SERIAL_NUM) @L:set_trigger_direction")
}

record(mbbi, "$(OSC):trigger:direction:fbk") {
    field(DTYP, "Picoscope")
    field(DESC, "Get Trigger Direction.")
    field(VAL, "0")
    field(RVAL, "2")

    field(ZRST, "RISING")         field(ZRVL, "2")
    field(ONST, "FALLING")        field(ONVL, "3")

    field(INP, "@S:$(SERIAL_NUM) @L:get_trigger_direction")
}

record(mbbi, "$(OSC):trigger:mode:fbk") {
    field(DTYP, "Picoscope")
    field(DESC, "Get Trigger Mode.")
   
    field(ZRST, "LEVEL")         field(ZRVL, "0")
    field(ONST, "WINDOW")        field(ONVL, "1")

    field(VAL, "0")
    field(INP, "@S:$(SERIAL_NUM) @L:get_trigger_mode")
}

record(ao, "$(OSC):trigger:upper:threshold") {
    field(DTYP, "Picoscope")
    field(VAL, "0")
    field(EGU, "Volts")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_trigger_upper")
    field(FLNK, "$(OSC):trigger:upper:threshold:fbk")
}

record(ai, "$(OSC):trigger:upper:threshold:fbk") {
    field(DTYP, "Picoscope")
    field(EGU, "Volts")
    field(INP, "@S:$(SERIAL_NUM) @L:get_trigger_upper")
}

record(ao, "$(OSC):trigger:upper:threshold:hysteresis") {
    field(DTYP, "Picoscope")
    field(VAL, "5")
    field(EGU, "%")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_trigger_upper_hysteresis")
    field(FLNK, "$(OSC):trigger:upper:threshold:hysteresis:fbk")
}

record(ai, "$(OSC):trigger:upper:threshold:hysteresis:fbk") {
    field(DTYP, "Picoscope")
    field(VAL, "5")
    field(EGU, "%")
    field(INP, "@S:$(SERIAL_NUM) @L:get_trigger_upper_hysteresis")
}


record(ao, "$(OSC):trigger:lower:threshold") {
    field(DTYP, "Picoscope")
    field(VAL, "0")
    field(EGU, "Volts")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_trigger_lower")
    field(FLNK, "$(OSC):trigger:lower:threshold:fbk")
}

record(ai, "$(OSC):trigger:lower:threshold:fbk") {
    field(DTYP, "Picoscope")
    field(EGU, "Volts")
    field(INP, "@S:$(SERIAL_NUM) @L:get_trigger_lower")
}

record(ao, "$(OSC):trigger:lower:threshold:hysteresis") {
    field(DTYP, "Picoscope")
    field(VAL, "5")
    field(EGU, "%")
    field(OUT, "@S:$(SERIAL_NUM) @L:set_trigger_lower_hysteresis")
    field(FLNK, "$(OSC):trigger:lower:threshold:hysteresis:fbk")
}

record(ai, "$(OSC):trigger:lower:threshold:hysteresis:fbk") {
    field(DTYP, "Picoscope")
    field(VAL, "5")
    field(EGU, "%")
    field(INP, "@S:$(SERIAL_NUM) @L:get_trigger_lower_hysteresis")
}

record(ai, "$(OSC):trigger:interval"){
    field(DTYP, "Picoscope")
    field(SCAN, "Passive")
    field(EGU, "seconds")
    field(DESC, "Trigger frequency in seconds")
    field(INP, "@S:$(SERIAL_NUM) @L:get_trigger_frequency")
}

record(ai, "$(OSC):trigger:missed"){ 
    field(DTYP, "Picoscope")
    field(SCAN, "Passive")
    field(VAL, "0")  
    field(DESC, "Num trigs missed since last detected")
    field(INP, "@S:$(SERIAL_NUM) @L:get_triggers_missed")
}